x-superset-user: &superset-user root
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./docker/superset_config.py:/app/pythonpath/superset_config.py

services:
    db:
        container_name: postgres_container
        image: postgres:14
        ports:
            - "5001:5432"
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: weather_db
        env_file:
            - .env
        volumes:
            - ./postgres/data:/var/lib/postgresql/data
            - ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
            - ./postgres/superset_init.sql:/docker-entrypoint-initdb.d/superset_init.sql
        networks:
            - my_network

    airflow:
        container_name: airflow_container
        image: apache/airflow:3.0.0
        ports:
            - "8001:8080"
        environment:
            AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db:5432/airflow_db
        env_file:
            - .env
        volumes:
            - ./airflow/dags:/opt/airflow/dags
            - ./airflow/logs:/opt/airflow/logs
            - ./airflow/plugins:/opt/airflow/plugins
            - ./code:/opt/airflow/code
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - db
        networks:
            - my_network
        command: >
            bash -c "airflow db migrate && airflow standalone"
    
    dbt:
        container_name: dbt_container
        image:  ghcr.io/dbt-labs/dbt-postgres:1.9.latest
        platform: linux/amd64                               # if using macOS, Force the container to use the amd64 platform by adding this to your dbt service
        volumes:
            - ./dbt/my_project:/usr/app
            - ./dbt:/root/.dbt
        working_dir: /usr/app
        depends_on:
            - db
        networks:
            - my_network
        command: run

    superset:
        env_file:
        - path: docker/.env # default
          required: true
        image: apache/superset:3.0.0-py310
        container_name: superset_app
        command: ["/app/docker/docker-bootstrap.sh", "app"]
        restart: unless-stopped
        ports:
            - 8088:8088
        extra_hosts:
            - "host.docker.internal:host-gateway"
        user: *superset-user
        environment:
            SUPERSET__LOG_LEVEL: "${SUPERSET__LOG_LEVEL:-INFO}"
            DATABASE_DB: "superset_db"
        depends_on:
            superset-init:
                condition: service_completed_successfully
        volumes: *superset-volumes
        networks:
            - my_network
    
    redis:
        image: redis:7
        container_name: superset_cache
        restart: unless-stopped
        ports:
            - "127.0.0.1:6379:6379"
        volumes:
            - redis:/data
        networks:
            - my_network

    

    superset-init:
        image: apache/superset:3.0.0-py310
        container_name: superset_init
        command: ["/app/docker/docker-init.sh"]
        env_file:
        - path: docker/.env # default
          required: true
        depends_on:
            db:
                condition: service_started
            redis:
                condition: service_started
        user: *superset-user
        volumes: *superset-volumes
        environment:
            SUPERSET__LOAD_EXAMPLES: "no"
            SUPERSET__LOG_LEVEL: "${SUPERSET__LOG_LEVEL:-INFO}"
            DATABASE_DB: "superset_db"
        healthcheck:
            disable: true
        networks:
            - my_network

networks:
    my_network:
        driver: bridge

volumes:
    redis:
        external: false